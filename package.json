{
	"name": "git-branch-master",
	"displayName": "Git Branch",
	"description": "Level up Inspector for Git Branches",
	"version": "1.0.7",
	"publisher": "carbonsoda",
	"author": {
		"name": "David W."
	},
	"homepage": "https://marketplace.visualstudio.com/items?itemName=carbonsoda.git-branch-master",
	"repository": {
		"type": "git",
		"url": "https://github.com/CarbonicSoda/vscode-git-branch-master"
	},
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/CarbonicSoda/vscode-git-branch-master/issues",
		"email": "carbonsoda@outlook.com"
	},
	"engines": {
		"vscode": "^1.80.0"
	},
	"keywords": [
		"git",
		"branch",
		"merge",
		"status",
		"commit",
		"diff"
	],
	"categories": [
		"SCM Providers"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"icon": "media/icon.png",
	"main": "./dist/extension.js",
	"extensionDependencies": [
		"vscode.git"
	],
	"capabilities": {
		"virtualWorkspaces": false,
		"untrustedWorkspaces": {
			"supported": false
		}
	},
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "gitBranchMaster",
					"title": "Branch Master",
					"icon": "$(merge)"
				}
			]
		},
		"views": {
			"gitBranchMaster": [
				{
					"id": "git-branch-master.gitBranchMaster",
					"name": "Branch Master"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "Git is not enabled or not installed. Install and enable Git to use this extension.",
				"when": "!config.git.enabled || git.missing"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "You have not yet opened a repository.\n[Open Folder](command:workbench.action.files.openFolder)\n[Clone Repository](command:git.clone)\nOpening a folder will close all currently open editors. To keep them open, [add a folder](command:workbench.action.addRootFolder) instead.",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount == 0 && openFolderWorkspaceSupport"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "You have not yet opened a repository.\n[Open Folder](command:workbench.action.files.openFolderViaWorkspace)\n[Clone Repository](command:git.clone)\nOpening a folder will close all currently open editors. To keep them open, [add a folder](command:workbench.action.addRootFolder) instead.",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount == 0 && !openFolderWorkspaceSupport && workbenchState == workspace"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "Waiting for Git to initialize...",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state != initialized"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "The folder currently open doesn't have a Git repository. You can initialize a repository which will enable this extension powered by Git.\n[Initialize Repository](command:git.init)",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && gitOpenRepositoryCount == 0"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "Fetching data from Git...\n\nThis might take a while depending on the number of branches your repository has.\n\nIf this is taking too long, [inspect configurations](command:workbench.action.openSettings?[\"git-branch-master\"]).",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && gitOpenRepositoryCount > 0 && !git-branch-master.loaded && !git-branch-master.noCommits"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "The current Git repository does not have an initial commit.\n\nCheck back and reload later.",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && gitOpenRepositoryCount > 0 && !git-branch-master.loaded && git-branch-master.noCommits"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "The current repository only has a single active branch. The extension is only useful for repositories with multiple branches!\n\nCheck back and reload later.",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && gitOpenRepositoryCount > 0 && git-branch-master.loaded && git-branch-master.singleBranch && config.git-branch-master.includeRemotes"
			},
			{
				"view": "git-branch-master.gitBranchMaster",
				"contents": "The current repository only has a single active branch. The extension is only useful for repositories with multiple branches!\n\nIf you forgot to include remote branches, [enable it](command:workbench.action.openSettings?[\"git-branch-master.view.includeRemotes\"]) and check back.",
				"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && gitOpenRepositoryCount > 0 && git-branch-master.loaded && git-branch-master.singleBranch && !config.git-branch-master.includeRemotes"
			}
		],
		"commands": [
			{
				"command": "git-branch-master.reloadView",
				"title": "Refresh View",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible",
				"icon": "$(refresh)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.switchRepo",
				"title": "Switch Repository",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && gitOpenRepositoryCount > 1",
				"icon": "$(repo)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.toggleViewFold",
				"title": "Toggle View Fold",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible",
				"icon": "$(fold)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.copyBranchName",
				"title": "Copy Branch Name",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && (viewItem == LocalBranch || viewItem == RemoteBranch)",
				"icon": "$(copy)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.copyCommitHash",
				"title": "Copy Full Commit Hash",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == Commit",
				"icon": "$(copy)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.switchToBranch",
				"title": "Switch to Branch",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == LocalBranch",
				"icon": "$(arrow-swap)",
				"category": "Git Branch Master"
			},
			{
				"command": "git-branch-master.toggleRemoteBranches",
				"title": "Toggle Remote Branches",
				"enablement": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible",
				"icon": "$(github-alt)",
				"category": "Git Branch Master"
			}
		],
		"keybindings": [
			{
				"command": "git-branch-master.reloadView",
				"when": "focusedView == 'git-branch-master.gitBranchMaster'",
				"key": "Ctrl+R"
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "git-branch-master.switchRepo",
					"when": "view == git-branch-master.gitBranchMaster",
					"group": "navigation@1"
				},
				{
					"command": "git-branch-master.toggleRemoteBranches",
					"when": "view == git-branch-master.gitBranchMaster",
					"group": "navigation@2"
				},
				{
					"command": "git-branch-master.reloadView",
					"when": "view == git-branch-master.gitBranchMaster",
					"group": "navigation@3"
				},
				{
					"command": "git-branch-master.toggleViewFold",
					"when": "view == git-branch-master.gitBranchMaster",
					"group": "navigation@4"
				}
			],
			"view/item/context": [
				{
					"command": "git-branch-master.copyBranchName",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && (viewItem == LocalBranch || viewItem == RemoteBranch)",
					"group": "inline@1"
				},
				{
					"command": "git-branch-master.copyBranchName",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && (viewItem == LocalBranch || viewItem == RemoteBranch)"
				},
				{
					"command": "git-branch-master.copyCommitHash",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == Commit",
					"group": "inline@1"
				},
				{
					"command": "git-branch-master.copyCommitHash",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == Commit"
				},
				{
					"command": "git-branch-master.switchToBranch",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == LocalBranch",
					"group": "inline@2"
				},
				{
					"command": "git-branch-master.switchToBranch",
					"when": "config.git.enabled && !git.missingg && workspaceFolderCount != 0 && git.state == initialized && view.git-branch-master.gitBranchMaster.visible && git-branch-master.loaded && viewItem == LocalBranch"
				}
			]
		},
		"configuration": [
			{
				"title": "Git Branch Master",
				"properties": {
					"git-branch-master.includeRemotes": {
						"order": 101,
						"title": "Include Remote Branches",
						"type": "boolean",
						"description": "Include remote branches in the view by default.\n\nIncluding remote branches may slow down the extension, or even unusable if the repository contains many branches (e.g. vscode with thousands of remote branches!). This should only be toggled on for smaller projects.\nAlso, manual reloads are required for remote branches.",
						"default": false,
						"scope": "resource"
					},
					"git-branch-master.pinnedBranches": {
						"order": 201,
						"title": "Pinned Branches",
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Branches that would be pinned on top of the view, if exists, in the order given below.\nRemote versions of entries e.g. <origin>/<master> will alse be pinned given <master>.",
						"default": [
							"master",
							"main"
						],
						"uniqueItems": true,
						"scope": "resource"
					},
					"git-branch-master.fetchDelay": {
						"order": 301,
						"title": "Fetch Delay",
						"type": "number",
						"minimum": 1000,
						"maximum": 120000,
						"description": "Delay before performing the next forced Git fetch to update the view in ms. Usually event listeners would be suffice, manually reloading the view is only required for remote branches.",
						"default": 10000
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "pnpm run package",
		"compile": "pnpm run check-types && pnpm run lint && node esbuild.cjs",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node esbuild.cjs --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "pnpm run check-types && pnpm run lint && node esbuild.cjs --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
		"check-types": "tsc --noEmit",
		"lint": "eslint src",
		"test": "vscode-test"
	},
	"devDependencies": {
		"@types/node": "~20.17.11",
		"@types/vscode": "^1.80.0",
		"@typescript-eslint/eslint-plugin": "^8.19.0",
		"@typescript-eslint/parser": "^8.19.0",
		"@vscode/test-cli": "^0.0.10",
		"@vscode/test-electron": "^2.4.1",
		"esbuild": "^0.25.1",
		"eslint": "^9.17.0",
		"npm-run-all": "^4.1.5",
		"typescript": "^5.7.2"
	},
	"pnpm": {
		"onlyBuiltDependencies": [
			"esbuild"
		]
	}
}
